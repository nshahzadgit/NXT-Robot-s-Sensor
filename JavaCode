package gps;

import compasNavigator;
import lejos.navigation.CompassNavigator;
import lejos.navigation.CompassPilot;
import lejos.nxt.*;

public class i2c_test extends Thread {
    //variable to store the current position
    private static double[] currentPos = new double[] { 0.0, 0.0 };

    //the array with points to travel to
    private static double[][] travelTo = new double[][] {
        { 51.181465, 5.9576449 }, { 51.181652, 5.9582815 } };

    //current destination point from the destination array
    public static int gotoPoint = 0;

    //temporary strings to store the latitude and longitude
    String latitude;
    String longitude;

    //floats to store the latitude longitude when they have been typecasted
    float latitude_decimals = 0.0f;
    float longitude_decimals = 0.0f;

    //variables to see if the robot is in rang of its destination
    public static boolean inrange = false;
    double distance = 0.0f;

    //the angle between the current and desitnation point
    public static float bearing = 0.0f;
    int distance_meters = 0;

    //variable to check if we are using old or new data
    boolean buffer = false;

    //initiate classes
    public static GPSSensor gps;
    public static CompassPilot pilot;
    public static CompassNavigator navigator;

    public static void main(String[] args) {
        LCD.clear();
        LCD.drawString("calibrating", 0, 0);
        LCD.refresh();

        gps = new GPSSensor(SensorPort.S1); // create a new GPSSensor object

        //Compass navigator variables
        float WheelDiameter = 5.6f;
        float TrackWidth = 18;

        //Full speed ahead
        Motor.A.setPower(100);
        Motor.B.setPower(100);

        //Create the Compass navigator object, this will help us navigating
        //using the digital compass.
        pilot = new CompassPilot(SensorPort.S2, WheelDiameter, TrackWidth,
                Motor.A, Motor.B);
        navigator = new CompassNavigator(pilot);
        navigator.calibrateCompass();

        //Create and start the navigation thread
        Thread gpsThread = new i2c_test();
        gpsThread.start();

        while (true) {
            // all the LCD output and buttons
            LCD.drawString("heading " + pilot.getAngle(), 0, 5);
            LCD.refresh();

            if (Button.LEFT.isPressed()) {
                LCD.clear();
                LCD.drawString("calibrating", 0, 0);
                LCD.refresh();
                navigator.calibrateCompass();
            }

            if (Button.ESCAPE.isPressed()) {
                System.exit(0);
            }
        }
    }
    
    public void run() {
        while (true) {
            // read the latitude information
            latitude = gps.doReading(2);

            // pause for 200 ms
            try {
                Thread.sleep(200);
            } catch (Exception E) {
            }

            //read the longitude data
            longitude = gps.doReading(4);

            //convert latitude and longitude to decimal degrees
            latitude_decimals = gps.toDecimalDegrees(latitude, "lat");
            longitude_decimals = gps.toDecimalDegrees(longitude, "long");
            
            buffer = false;

            if (latitude_decimals > 0) {
                // has to be larger then zero
                currentPos[0] = latitude_decimals;
            } else {
                // otherwise we use data from the buffer
                buffer = true;
            }
            if (longitude_decimals > 0) {
                currentPos[1] = longitude_decimals;
            } else {
                buffer = true;
            }

            // calculate data using the spherical law of cosines,
            // unfortunately the square root function of Lejos is not good
            // enough.
            // distance = gps.calculateDistance(currentPos[0],
            // currentPos[1],
            // travelTo[0][0], travelTo[0][1]);
            // distance_meters = (int)(Math.abs(distance));
            
            // therefore (for now) use the alternate inRange function)
            inrange = gps.inRange(currentPos[0], currentPos[1],
                    travelTo[gotoPoint][0], travelTo[gotoPoint][1]);

            // calculate the bearing to the destination
            bearing = (int) Math.abs(gps.calculateBearing(currentPos[0],
                    currentPos[1], travelTo[gotoPoint][0],
                    travelTo[gotoPoint][1]));

            // print everything on the screen
            LCD.clear();
            LCD.drawString("lat " + currentPos[0], 0, 0);
            LCD.drawString("long " + currentPos[1], 0, 1);
            LCD.drawString("inrange " + inrange, 0, 3);
            LCD.drawString("bearing " + bearing, 0, 4);
            LCD.drawString("buffer " + buffer, 0, 6);
            LCD.refresh();

            // let the robot rotate to the calculated bearing using the digital
            // compass
            pilot.rotateTo((int) bearing);

            if (!inrange) {
            // if we didn't arrive yet we will drive for two seconds

                Motor.A.forward();
                Motor.B.forward();

                try {
                    Thread.sleep(2000);
                } catch (Exception E) {
                }

                Motor.A.stop();
                Motor.B.stop();
            } else {
            // if we did arrive, then goto the next point in the destination
            // array

                if (gotoPoint == 0) {
                    gotoPoint = 1;
                } else {
                    gotoPoint = 0;
                }
            }

            LCD.clear();
            LCD.drawString("lat " + currentPos[0], 0, 0);
            LCD.drawString("long " + currentPos[1], 0, 1);
            LCD.drawString("inrange " + inrange, 0, 3);
            LCD.drawString("bearing " + bearing, 0, 4);
            LCD.drawString("point " + gotoPoint, 0, 6);
            LCD.refresh();

            try {
                Thread.sleep(1000);
            } catch (Exception E) {
            }
        }
    }
}